diff a/Makefile b/Makefile	(rejected hunks)
@@ -1,74 +1,98 @@
-#
-# SPDX-FileCopyrightText: 2024 Zeal 8-bit Computer <contact@zeal8bit.com>
-#
-# SPDX-License-Identifier: CC0-1.0
-#
+##
+# The build variables for ZGDK are all optional.
+# Override their value by uncommenting the corresponding line.
+##
 
-SHELL := /bin/bash
+##
+# Project specific
+##
 
-# Specify the files to compile and the name of the final binary
-SRCS=$(wildcard $(INPUT_DIR)/*.c)
+# Specify the name of the output binary.
 BIN=pong.bin
 
-# Directory where source files are and where the binaries will be put
-INPUT_DIR=src
-OUTPUT_DIR=bin
+# Specify the directory containing the source files.
+# INPUT_DIR=src
 
-# Include directory containing Zeal 8-bit OS header files.
-ifndef ZOS_PATH
-$(error "Please define ZOS_PATH environment variable. It must point to Zeal 8-bit OS source code path.")
+# Specify the build containing the compiled files.
+# OUTPUT_DIR=bin
+
+# Specify the files in the src directory to compile and the name of the final binary.
+# By default, all the C files inside `INPUT_DIR` are selected, the `INPUT_DIR` prefix must not be part of the files names.
+# SRCS=$(notdir $(wildcard $(INPUT_DIR)/*.c))
+
+# Specify the location of your asserts (aseprite, gif, zts, ztp, ztm, etc)
+# ASSETS_DIR=assets
+
+##
+# ZOS Specific
+##
+
+# Specify the shell to use for sub-commands.
+# SHELL = /bin/bash
+
+# Specify the C compiler to use.
+# ZOS_CC=sdcc
+
+# Specify the linker to use.
+# ZOS_LD=sdldz80
+
+# Specify additional flags to pass to the compiler.
+# ZOS_CFLAGS=
+
+# Specify additional flags to pass to the linker.
+# ZOS_LDFLAGS=
+
+# Specify the `objcopy` binary that performs the ihex to bin conversion.
+# By default it uses `sdobjcopy` or `objcopy` depending on which one is installed.
+# OBJCOPY=$(shell which sdobjcopy objcopy | head -1)
+
+##
+# ZVB Specific
+##
+
+# Specify additional flags to pass to the compiler. This will be concatenated to `ZOS_CFLAGS`.
+# ZVB_CFLAGS=-I$(ZVB_SDK_PATH)/include/
+
+# Specify additional flags to pass to the linker. This will be concatenated to `ZOS_LDFLAGS`.
+# ZVB_LDFLAGS=-k $(ZVB_SDK_PATH)/lib/ -l zvb_gfx
+
+# ZGDK has sound enabled by default, uncomment this to disable sound and reduce your binary size
+# ENABLE_SOUND=0
+# ENABLE_CRC32=1
+
+##
+# ZGDK Specific
+##
+
+# ASEPRITE_PATH ?= ~/.steam/debian-installation/steamapps/common/Aseprite/aseprite
+# GIF_SRCS=$(ASEPRITE_SRCS:.aseprite=.gif)
+# ZTS_SRCS=$(GIF_SRCS:.gif=.zts)
+# ZTM_SRCS=$(TILEMAP_SRCS:.tmx=.ztm)
+
+# Set these #define flags
+# EMULATOR=1
+# FRAMELOCK=1
+# DEBUG=1
+
+##
+# User Defined
+##
+
+# EXTRA_CFLAGS= -I$(ZGDK_PATH)/include
+# EXTRA_LDFLAGS= -k $(ZGDK_PATH)/lib -l zgdk -l zvb_sound
+
+# GFX_BITS = 1
+# GFX_COMPRESSED = 0
+# GFX_STRIP = 128
+
+ifdef BREAK
+ZOS_CFLAGS += -DBREAK
 endif
-ifndef ZVB_SDK_PATH
-$(error "Please define ZVB_SDK_PATH environment variable. It must point to Zeal Video Board SDK path.")
+
+ifndef ZGDK_PATH
+    $(error "Failure: ZGDK_PATH variable not found. It must point to ZGDK path.")
 endif
-ZVB_INCLUDE=$(ZVB_SDK_PATH)/include/
-ZOS_INCLUDE=$(ZOS_PATH)/kernel_headers/sdcc/include/
-ZVB_LIB_PATH=$(ZVB_SDK_PATH)/lib/
-ZOS_LIB_PATH=$(ZOS_PATH)/kernel_headers/sdcc/lib
-# Regarding the linking process, we will need to specify the path to the crt0 REL file.
-# It contains the boot code for C programs as well as all the C functions performing syscalls.
-CRT_REL=$(ZOS_PATH)/kernel_headers/sdcc/bin/zos_crt0.rel
-
-
-# Compiler, linker and flags related variables
-CC=sdcc
-# Specify Z80 as the target, compile without linking, and place all the code in TEXT section
-# (_CODE must be replace).
-CFLAGS=-mz80 --opt-code-speed -c --codeseg TEXT -I$(ZOS_INCLUDE) -I$(ZVB_INCLUDE)
-LD=sdldz80
-# Make sure the whole program is relocated at 0x4000 as request by Zeal 8-bit OS.
-LDFLAGS=-n -mjwx -i -b _HEADER=0x4000 -k $(ZOS_LIB_PATH) -l z80 -k $(ZVB_LIB_PATH) -l zvb_gfx
-# Binary used to convert ihex to binary
-OBJCOPY=objcopy
-
-# Generate the intermediate Intel Hex binary name
-BIN_HEX=$(patsubst %.bin,%.ihx,$(BIN))
-# Generate the rel names for C source files. Only keep the file names, and add output dir prefix.
-SRCS_REL=$(subst $(INPUT_DIR)/,$(OUTPUT_DIR)/,$(patsubst %.c,%.rel,$(SRCS)))
-SRCS_ASM_REL=$(subst $(INPUT_DIR)/,$(OUTPUT_DIR)/,$(patsubst %.asm,%.rel,$(SRCS)))
-
-
-.PHONY: all clean
-
-all: clean $(OUTPUT_DIR) $(OUTPUT_DIR)/$(BIN_HEX) $(OUTPUT_DIR)/$(BIN)
-	@bash -c 'echo -e "\x1b[32;1mSuccess, binary generated: $(OUTPUT_DIR)/$(BIN)\x1b[0m"'
-
-$(OUTPUT_DIR):
-	mkdir -p $(OUTPUT_DIR)
-
-# Generate a REL file for each source file. In fact, SDCC doesn't support compiling multiple source file
-# at once. We have to create the same directory structure in output dir too.
-$(SRCS_REL): $(OUTPUT_DIR)/%.rel : $(INPUT_DIR)/%.c
-	@mkdir -p $(OUTPUT_DIR)/$(dir $*)
-	$(CC) $(CFLAGS) -o $(OUTPUT_DIR)/$(dir $*) $<
-
-# Generate the final Intel HEX binary.
-$(OUTPUT_DIR)/$(BIN_HEX): $(CRT_REL) $(SRCS_REL)
-	$(LD) $(LDFLAGS) $(OUTPUT_DIR)/$(BIN_HEX) $(CRT_REL) $(SRCS_REL)
-
-# Convert the Intel HEX file to an actual binary.
-$(OUTPUT_DIR)/$(BIN):
-	$(OBJCOPY) --input-target=ihex --output-target=binary $(OUTPUT_DIR)/$(BIN_HEX) $(OUTPUT_DIR)/$(BIN)
-
-clean:
-	rm -fr bin/
\ No newline at end of file
+
+include $(ZGDK_PATH)/base_sdcc.mk
+
+## Add your own rules here
\ No newline at end of file
